name: Run Falcon Test 2.0

on:
  workflow_dispatch:

    
env:
  # Versions (easy to change)
  KIND_VERSION: "v0.20.0"
  HELM_VERSION: "v3.14.0"
  CHARTMUSEUM_VERSION: "0.14.0"    # used as container tag
  MOUNTEBANK_IMAGE: "bbyars/mountebank:2.4.0"
  # Helm/chart/image placeholders ‚Äî change to your real names
  COMMON_CHART_PATH: "./charts/common"   # local common chart to package & push to chartmuseum
  APP_CHART_PATH: "./charts/myapp"       # chart that references local docker image
  HELM_RELEASE_COMMON: "common-chart"
  HELM_RELEASE_APP: "myapp"
  DOCKER_IMAGE_NAME: "myorg/myapp-testimage:ci"
  CHARTMUSEUM_PORT: 8080
  
jobs:
  falcon-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clone dep repo
        run: git clone https://github.com/o-ran-sc/aiml-fw-aimlfw-dep.git

      # 2Ô∏è‚É£ Set up Docker image
      - name: Build Docker image
        run: |
          docker build -t data-extraction:latest .

      # 3Ô∏è‚É£ Set up KinD cluster
      - name: Create KinD cluster
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: ci-sample

      # Wait for KinD nodes to be ready
      - name: Wait for nodes ready
        run: kubectl wait --for=condition=Ready nodes --all --timeout=120s
      
      - name: Setup helm
        run: |
          cd aiml-fw-aimlfw-dep
          ./bin/install_common_templates_to_helm.sh
      
      - name: Load Docker image into KinD
        run: kind load docker-image data-extraction:latest --name ci-sample
      
      - name: create traininghost namespace
        run: kubectl create namespace traininghost

      # - name: Install PostgreSQL database (tm-db)
      #   run: |
      #     echo "üì¶ Installing PostgreSQL (tm-db) in namespace traininghost..."
      #     helm repo add bitnami https://charts.bitnami.com/bitnami
      #     helm repo update
          
      #     helm install tm-db bitnami/postgresql \
      #       --set image.repository="bitnamilegacy/postgresql" \
      #       --set image.tag="17.6.0" \
      #       --set global.security.allowInsecureImages=true \
      #       --set auth.postgresPassword=postgres \
      #       --set primary.persistence.enabled=false \
      #       --namespace traininghost

      #     echo "‚è≥ Waiting for PostgreSQL pod to be ready..."
      #     kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=postgresql -n traininghost --timeout=300s

      #     echo "‚úÖ PostgreSQL installation complete."
      #     kubectl get pods -n traininghost -l app.kubernetes.io/name=postgresql
      
      - name: Mock secrets for data-extraction
        run: |
          set -euo pipefail
          NAMESPACE=traininghost

          echo "üîß Creating namespace if missing..."
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

          echo "üîê Creating mock secret: cassandra"
          # kubectl create secret generic leofs-secret \
          #   --from-literal=password="dummy-s3-secret-key" \
          #   -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

          kubectl create secret generic cassandra -n $NAMESPACE \
          --from-literal=cassandra-password='cassandra-pwd'

      - name: install data-extraction
        run: |
          cd aiml-fw-aimlfw-dep
          helm dep up helm/data-extraction
          helm install data-extraction helm/data-extraction -f RECIPE_EXAMPLE/example_recipe_local_images_oran_latest.yaml

      - name: Wait for data-extraction pod ready
        run: |
          set -euo pipefail
          NAMESPACE=traininghost

          echo "üîç Checking pod status before waiting..."
          kubectl get pods -n $NAMESPACE -o wide || true

          echo "üìã Describing any non-running pods (pre-check)..."
          kubectl get pods -n $NAMESPACE --no-headers | awk '$3 != "Running" {print $1}' | \
            xargs -r -I {} kubectl describe pod {} -n $NAMESPACE || true

          echo "‚è≥ Waiting for all pods in namespace '$NAMESPACE' to be Ready (max 100s)..."
          if ! kubectl wait --for=condition=Ready pod --namespace $NAMESPACE --all --timeout=100s; then
            echo "‚ùå Timeout waiting for pods. Dumping debug info..."
            echo "üîπ Current pod states:"
            kubectl get pods -n $NAMESPACE -o wide || true
            echo "üîπ Recent events:"
            kubectl get events -n $NAMESPACE --sort-by=.lastTimestamp | tail -n 20 || true
            exit 1
          fi

          echo "‚úÖ All pods in '$NAMESPACE' are Ready."
          echo "üìä Final pod status:"
          kubectl get pods -n $NAMESPACE -o wide

      - name: list data-extraction pod
        run: kubectl get pods -n traininghost

      # - name: Debug pod before test
      #   run: |
      #     POD=$(kubectl get pods -l app.kubernetes.io/name=modelmgmtservice -o jsonpath='{.items[0].metadata.name}')
      #     kubectl describe pod $POD
      #     kubectl logs $POD

      # - name: run regression test
      #   run: |
      #     kubectl port-forward svc/mme-modelmgmtservice 31082:8082 -n traininghost &
      #     sleep 10
      #     pip install requests pytest pytest-html
      #     pytest tests/ --maxfail=1 --disable-warnings -q --html=pytest_report.html
      
      # - name: Debug pod
      #   run: |
      #     POD=$(kubectl get pods -l app.kubernetes.io/name=modelmgmtservice -o jsonpath='{.items[0].metadata.name}')
      #     kubectl describe pod $POD
      #     kubectl logs $POD
      
      # - name: Upload Test Report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: pytest-report
      #     path: pytest_report.html
